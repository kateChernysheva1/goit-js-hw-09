{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEaC,SAASC,cAAc,SAE/BC,iBAAiB,UAItB,SAAoBC,GAClBA,EAAGC,iBACH,IAKIC,EAAAF,EAAGG,OAAOC,SAJIC,EAIdH,EAJFI,MAASC,MAAOD,OAAS,IAATD,EAAQ,EAARA,EACDG,EAGbN,EAHFO,KAAQF,MAAOE,OAAQ,IAARD,EAAO,EAAPA,EACEE,EAEfR,EAFFS,OAAUJ,MAAOI,OAAU,IAAVD,EAAS,EAATA,EACjBE,EACEV,EADFU,OAGFC,EAAQ,EACRD,EAAOE,UAAW,EAElBC,YAAW,WACT,I,mBAeJ,SAAuBC,EAAUV,EAAOG,GACtC,IAAMQ,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAMjB,EAAQO,EACpBE,YAAW,WACLE,EACFI,EAAQ,CAAEL,WAAUO,QAEpBD,EAAO,CAAEN,WAAUO,O,GAEpBV,GACHA,GAASJ,C,KAzBPe,CAAcC,EAAOC,OAAOpB,GAAQoB,OAAOjB,IACxCkB,MAAK,SAAAC,G,IAAGZ,EAAQY,EAARZ,SAAUO,EAAGK,EAAHL,IACjBM,EAAAlC,GAASmC,OAAOC,QAAQ,qBAAoCC,OAAfhB,EAAS,QAAUgB,OAAJT,EAAI,M,IAEjEU,OAAM,SAAAL,G,IAAGZ,EAAQY,EAARZ,SAAUO,EAAGK,EAAHL,IAClBM,EAAAlC,GAASmC,OAAOI,QAAQ,oBAAmCF,OAAfhB,EAAS,QAAUgB,OAAJT,EAAI,M,IAEhEY,SAAQ,WACHV,IAAUC,OAAOf,KAASC,EAAOE,UAAW,E,KAT7CsB,EAAQ,EAAGA,GAASV,OAAOf,GAASyB,IAAOC,EAAAD,E,GAYnD9B,E,IA3BL,IAAIO,EAAQ,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', submitForm);\n\nlet timer = 0;\n\nfunction submitForm(ev) {\n  ev.preventDefault();\n  const {\n    delay: { value: delay = 0 },\n    step: { value: step = 0 },\n    amount: { value: amount = 0 },\n    button,\n  } = ev.target.elements;\n\n  timer = 0;\n  button.disabled = true;\n\n  setTimeout(() => {\n    for (let index = 1; index <= Number(amount); index++) {\n      createPromise(index, Number(delay), Number(step))\n        .then(({ position, sum }) => {\n          Notiflix.Notify.success(`Fulfilled promise ${position} in ${sum}ms`);\n        })\n        .catch(({ position, sum }) => {\n          Notiflix.Notify.failure(`Rejected promise ${position} in ${sum}ms`);\n        })\n        .finally(() => {\n          if (index === Number(amount)) button.disabled = false;\n        });\n    }\n  }, delay);\n}\n\nfunction createPromise(position, delay, step) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    const sum = delay + timer;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, sum });\n      } else {\n        reject({ position, sum });\n      }\n    }, timer);\n    timer += step;\n  });\n}\n"],"names":["$6JpON","parcelRequire","document","querySelector","addEventListener","ev","preventDefault","_elements","target","elements","tmp","delay","value","tmp1","step","tmp2","amount","button","$ce04d3a99e08e73b$var$timer","disabled","setTimeout","position","shouldResolve","Math","random","Promise","resolve","reject","sum","$ce04d3a99e08e73b$var$createPromise","index","Number","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","finally","index1","_loop"],"version":3,"file":"03-promises.bbca63e6.js.map"}